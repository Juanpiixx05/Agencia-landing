---
// Array of background images to be displayed in the hero section.
const backgroundImages = [
  '/images/service1.jpg',
  '/images/service2.jpg',
  '/images/service3.jpg',
  '/images/service4.jpg'
];
---

<section id="inicio" class="hero">
  <div class="background-container">
    <div class="overlay"></div>
    {/* Mapping through the background images to create a div for each image */}
    {backgroundImages.map((image, index) => (
      <div class="background-image" data-index={index} style={`background-image: url(${image});`}></div>
    ))}
  </div>
  <div class="container">
    <div class="text-content">
      <h1>
        <span class="text-reveal fade-in">Somos un estudio creativo global.</span>
        <span class="text-reveal fade-in fade-in-delay-1">No hacemos soluciones genéricas.</span>
      </h1>
      <a href="/sobre-nosotros" class="cta-link fade-in fade-in-delay-2">
        Conócenos
      </a>
      <ul></ul>
      <a href="/" class="cta-link fade-in fade-in-delay-2">
        Ver Planes
      </a>
    </div>
  </div>
</section>

<style>
  /* Styles for the hero section */
  .hero {
    min-height: 100vh;
    display: flex;
    align-items: center;
    padding: var(--spacing-xl) 0;
    margin-top: -80px;
    position: relative;
    overflow: hidden;
  }

  /* Background container styles */
  .background-container {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: -1;
  }

  /* Overlay styles for darkening the background images */
  .overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.4);
    z-index: 1;
  }

  /* Background image styles */
  .background-image {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-size: cover;
    background-position: center;
    opacity: 0;
    transform: scale(1.1);
    will-change: transform;
    visibility: hidden;
  }

  /* Active background image styles */
  .background-image.active {
    opacity: 1;
    transform: scale(1);
    visibility: visible;
  }

  /* Container for text content */
  .container {
    position: relative;
    z-index: 2;
  }

  /* Text content styles */
  .text-content {
    max-width: 900px;
    color: var(--color-secondary);
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
    margin-top: 40px;
  }

  /* Heading styles */
  h1 {
    font-weight: 500;
    letter-spacing: -0.02em;
    line-height: 1.1;
    margin-bottom: var(--spacing-lg);
  }

  h1 span {
    display: block;
    margin-bottom: 0.5em;
  }

  /* Call-to-action link styles */
  .cta-link {
    font-size: 1.2rem;
    font-weight: 500;
    display: inline-flex;
    align-items: center;
    gap: 0.5em;
    position: relative;
    padding-bottom: 4px;
    color: var(--color-secondary);
  }

  /* Arrow transition effect */
  .arrow {
    transition: transform var(--transition-normal) var(--ease-out-expo);
  }

  /* Arrow hover effect */
  .cta-link:hover .arrow {
    transform: translateX(8px);
  }

  /* Underline effect for call-to-action links */
  .cta-link::after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;
    height: 1px;
    background-color: var(--color-secondary);
    transform: scaleX(0);
    transform-origin: right;
    transition: transform var(--transition-normal) var(--ease-out-expo);
  }

  /* Underline hover effect */
  .cta-link:hover::after {
    transform: scaleX(1);
    transform-origin: left;
  }

  /* Responsive styles */
  @media (max-width: 768px) {
    .hero {
      padding: var(--spacing-lg) 0;
    }

    h1 {
      font-size: 2.5rem;
    }

    .cta-link {
      font-size: 1rem;
    }
  }
</style>

<script>
  // Initialize variables to keep track of the current image index and mouse position
  let currentImageIndex = 0;
  const images = document.querySelectorAll('.background-image') as NodeListOf<HTMLElement>;
  const hero = document.querySelector('.hero') as HTMLElement;
  let mouseX = 0;
  let lastMouseX = mouseX;
  let lastTimestamp = Date.now();
  const MOVEMENT_THRESHOLD = 50; // Umbral para detectar movimiento
  const totalImages = images.length;

  // Activate the first image by default
  if (images.length > 0) {
    images[0].classList.add('active');
  }

  // Function to change the image based on the mouse position
  function changeImageBasedOnMousePosition(mouseX) {
    const heroWidth = hero.clientWidth;
    const sectionWidth = heroWidth / totalImages;
    let newImageIndex = Math.floor(mouseX / sectionWidth);

    // Ensure the new image index is within the valid range
    if (newImageIndex < 0) newImageIndex = 0;
    if (newImageIndex >= totalImages) newImageIndex = totalImages - 1;

    // Only change the image if it's different from the current one
    if (newImageIndex !== currentImageIndex) {
      images[currentImageIndex].classList.remove('active');
      currentImageIndex = newImageIndex;
      images[currentImageIndex].classList.add('active');
    }
  }

  // Add event listener to the hero section to track mouse movement
  if (hero) {
    hero.addEventListener('mousemove', function(this: HTMLElement, e: MouseEvent): void {
      const newMouseX = e.clientX;
      const currentTime = Date.now();
      const timeDiff = currentTime - lastTimestamp;
      const distance = newMouseX - lastMouseX;
      const speed = Math.abs(distance / timeDiff); // Speed in pixels per millisecond

      // Define a speed threshold to determine when to change the image
      const SPEED_THRESHOLD = 0.5; // Adjust this value as needed

      // Change the image based on the speed
      if (speed > SPEED_THRESHOLD) {
        changeImageBasedOnMousePosition(newMouseX);
      }

      lastMouseX = newMouseX;
      lastTimestamp = currentTime;
    }, { passive: true });
  }
</script>
