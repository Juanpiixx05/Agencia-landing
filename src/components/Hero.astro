---
import '../styles/global.css';
---

<main class="hero">
  <!-- Elementos de fondo interactivos -->
  <div class="hero-bg__parallax" />
  <div class="coffee-steam" aria-hidden="true">
    <div class="steam-layer"></div>
    <div class="steam-layer"></div>
  </div>

  <!-- Contenido principal con efectos 3D -->
  <div class="hero-content">
    <h1 class="text-glitch" data-cursor-interact>eterCore</h1>
    <p class="text-reveal">diseño<br>vanguardia<br>estilo</p>
  </div>

  <!-- Efecto de partículas para interacción mouse -->
  <canvas class="particles-canvas" id="particles-js" />
</main>

<style>
  .hero {
    height: 100svh;
    position: relative;
    overflow: hidden;
    background: linear-gradient(
      22deg,
      rgba(255, 255, 255, 0.95) 0%,
      rgba(245, 245, 245, 0.85) 100%
    );
  }

  .hero-bg__parallax {
    position: absolute;
    width: 120%;
    height: 120%;
    background: url('/images/service1.jpg') center/cover;
    mix-blend-mode: multiply;
    opacity: 0.15;
    transform: translateZ(0);
  }

  .coffee-steam {
    position: absolute;
    width: 100%;
    height: 100%;
    pointer-events: none;
  }

  .steam-layer {
    position: absolute;
    width: 150%;
    height: 150%;
    background: radial-gradient(circle at 50% 50%, 
      rgba(250, 250, 250, 0.1) 0%,
      rgba(255, 255, 255, 0) 70%);
    animation: steam-flow 25s infinite linear;
  }

  .steam-layer:nth-child(2) {
    animation-delay: -12.5s;
    opacity: 0.7;
  }

  .hero-content {
    position: relative;
    z-index: 2;
    display: flex;
    align-items: center;
    padding: 0 clamp(1rem, 10vw, 4rem);
    height: 100%;
  }

  .text-glitch {
    position: relative;
    overflow: hidden;
  }

  .text-glitch::before,
  .text-glitch::after {
    content: attr(data-text);
    position: absolute;
    top: 0;
    left: 0;
    opacity: 0.8;
    mix-blend-mode: difference;
  }

  .text-glitch::before {
    animation: glitch-1 8s infinite linear alternate;
    clip-path: polygon(0 20%, 100% 20%, 100% 30%, 0 30%);
  }

  .text-glitch::after {
    animation: glitch-2 8s infinite linear alternate;
    clip-path: polygon(0 60%, 100% 60%, 100% 70%, 0 70%);
  }

  .particles-canvas {
    position: absolute;
    top: 0;
    left: 0;
    z-index: 1;
    opacity: 0.3;
  }

  @keyframes steam-flow {
    0% { transform: translate(-10%, -10%) scale(0.9); }
    50% { transform: translate(10%, 10%) scale(1.1); }
    100% { transform: translate(-10%, -10%) scale(0.9); }
  }

  @keyframes glitch-1 {
    0% { transform: translate(0); }
    20% { transform: translate(-2px, 2px); }
    40% { transform: translate(-2px, -2px); }
    60% { transform: translate(2px, 2px); }
    80% { transform: translate(2px, -2px); }
    100% { transform: translate(0); }
  }

  @keyframes glitch-2 {
    0% { transform: translate(0); }
    20% { transform: translate(2px, -2px); }
    40% { transform: translate(-2px, -2px); }
    60% { transform: translate(-2px, 2px); }
    80% { transform: translate(2px, 2px); }
    100% { transform: translate(0); }
  }
</style>

<script>
  // Efecto partículas interactivo
  class Particles {
    constructor(canvas) {
      this.canvas = canvas;
      this.ctx = canvas.getContext('2d');
      this.particles = [];
      this.mouse = { x: null, y: null };
      
      this.init();
    }

    init() {
      this.resize();
      window.addEventListener('resize', this.resize.bind(this));
      this.canvas.addEventListener('mousemove', e => {
        this.mouse.x = e.clientX;
        this.mouse.y = e.clientY;
      });

      for(let i = 0; i < 100; i++) {
        this.particles.push({
          x: Math.random() * this.width,
          y: Math.random() * this.height,
          size: Math.random() * 2,
          speedX: Math.random() * 0.5 - 0.25,
          speedY: Math.random() * 0.5 - 0.25
        });
      }

      this.animate();
    }

    resize() {
      this.width = this.canvas.width = window.innerWidth;
      this.height = this.canvas.height = window.innerHeight;
    }

    animate() {
      this.ctx.clearRect(0, 0, this.width, this.height);
      
      this.particles.forEach(particle => {
        if(this.mouse.x && this.mouse.y) {
          const dx = particle.x - this.mouse.x;
          const dy = particle.y - this.mouse.y;
          const distance = Math.sqrt(dx * dx + dy * dy);
          
          if(distance < 100) {
            particle.x += dx * 0.01;
            particle.y += dy * 0.01;
          }
        }

        particle.x += particle.speedX;
        particle.y += particle.speedY;

        if(particle.x > this.width) particle.x = 0;
        if(particle.x < 0) particle.x = this.width;
        if(particle.y > this.height) particle.y = 0;
        if(particle.y < 0) particle.y = this.height;

        this.ctx.fillStyle = 'rgba(58, 42, 26, 0.3)';
        this.ctx.beginPath();
        this.ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);
        this.ctx.fill();
      });

      requestAnimationFrame(this.animate.bind(this));
    }
  }

  // Inicialización
  document.addEventListener('DOMContentLoaded', () => {
    // Partículas
    const canvas = document.getElementById('particles-js');
    new Particles(canvas);

    // Animaciones
    const heroContent = document.querySelector('.text-glitch');
    heroContent.style.opacity = '0';
    heroContent.style.transform = 'translateY(50px)';

    setTimeout(() => {
      heroContent.style.transition = 'all 2s cubic-bezier(0.4, 0, 0.2, 1)';
      heroContent.style.opacity = '1';
      heroContent.style.transform = 'translateY(0)';
    }, 100);

    // Parallax simple
    window.addEventListener('scroll', () => {
      const parallax = document.querySelector('.hero-bg__parallax');
      let scrollPosition = window.pageYOffset;
      parallax.style.transform = `translateY(${scrollPosition * 0.5}px)`;
    });
  });
</script>