---
// Array de imágenes de fondo para el hero
const backgroundImages = [
  '/images/hero1.jpg',
  '/images/hero2.jpg',
  '/images/hero3.jpg',
  '/images/hero4.jpg'
];

interface HeroProps {
  title: string;
  subtitle?: string;
  description?: string;
  ctaPrimary?: { 
    text: string, 
    href: string 
  };
}

const { 
  title = "Diseño Digital Transformador", 
  subtitle = "Soluciones Estratégicas para tu Negocio",
  description = "Creamos experiencias digitales que conectan, inspiran y impulsan el crecimiento de tu marca.",
  ctaPrimary = { text: "Explorar Servicios", href: "/servicios" }
} = Astro.props;
---

<section 
  id="hero-section"
  class="relative min-h-screen flex flex-col justify-center items-center text-center px-6 py-24 bg-neutral-50 overflow-hidden"
  aria-labelledby="hero-title"
>
  <div id="hero-background" class="absolute inset-0 z-0">
    {backgroundImages.map((image, index) => (
      <img 
        src={image} 
        alt={`Fondo Hero ${index + 1}`} 
        class={`absolute inset-0 w-full h-full object-cover transition-opacity duration-500 ease-in-out hero-bg-image ${index === 0 ? 'active' : ''}`}
        data-index={index}
      />
    ))}
  </div>

  <div id="hero-cursor" class="fixed pointer-events-none z-50 hidden md:block">
    <div class="w-16 h-16 bg-white/30 rounded-full blur-sm absolute -translate-x-1/2 -translate-y-1/2"></div>
  </div>

  <div class="max-w-4xl mx-auto space-y-6 relative z-10 container">
    <h1 
      id="hero-title" 
      class="text-display text-neutral-900 text-4xl md:text-5xl lg:text-6xl font-bold tracking-tight fade-in"
    >
      {title}
    </h1>
    
    <h2 class="text-subtitle text-neutral-700 text-xl md:text-2xl mt-4 fade-in fade-in-delay-1">
      {subtitle}
    </h2>
    
    <p class="text-body text-neutral-600 max-w-2xl mx-auto mt-6 fade-in fade-in-delay-2">
      {description}
    </p>
    
    <div class="flex justify-center space-x-4 mt-10 fade-in fade-in-delay-3">
      <a 
        href={ctaPrimary.href} 
        class="px-8 py-3 bg-brand-primary text-white rounded-xl hover:bg-brand-secondary transition-colors duration-300 shadow-medium hover-lift"
      >
        {ctaPrimary.text}
      </a>
    </div>
  </div>
</section>

<script define:vars={{backgroundImages}}>
  document.addEventListener('DOMContentLoaded', () => {
    const hero = document.getElementById('hero-section');
    const heroBackground = document.getElementById('hero-background');
    const images = document.querySelectorAll('.hero-bg-image') as NodeListOf<HTMLElement>;
    
    let currentImageIndex = 0;
    let mouseX = 0;
    let lastMouseX = mouseX;
    let lastTimestamp = Date.now();
    const MOVEMENT_THRESHOLD = 50; // Umbral para detectar movimiento
    const totalImages = images.length;

    // Activar la primera imagen
    if (images.length > 0) {
      images[0].classList.add('active');
    }

    // Función para cambiar la imagen basado en la posición del mouse
    function changeImageBasedOnMousePosition(mouseX: number) {
      const heroWidth = hero.clientWidth;
      const sectionWidth = heroWidth / totalImages;
      let newImageIndex = Math.floor(mouseX / sectionWidth);

      // Asegurarse de que el índice esté dentro del rango
      if (newImageIndex < 0) newImageIndex = 0;
      if (newImageIndex >= totalImages) newImageIndex = totalImages - 1;

      // Solo cambiar si la imagen es diferente
      if (newImageIndex !== currentImageIndex) {
        images[currentImageIndex].classList.remove('active');
        currentImageIndex = newImageIndex;
        images[currentImageIndex].classList.add('active');
      }
    }

    if (hero) {
      hero.addEventListener('mousemove', function(this: HTMLElement, e: MouseEvent): void {
        const newMouseX = e.clientX;
        const currentTime = Date.now();
        const timeDiff = currentTime - lastTimestamp;
        const distance = newMouseX - lastMouseX;
        const speed = Math.abs(distance / timeDiff); // Speed in pixels per millisecond

        // Define a speed threshold
        const SPEED_THRESHOLD = 0.5; // Adjust this value as needed

        // Change image based on speed
        if (speed > SPEED_THRESHOLD) {
          changeImageBasedOnMousePosition(newMouseX);
        }

        lastMouseX = newMouseX;
        lastTimestamp = currentTime;
      }, { passive: true });

      // Reiniciar al salir del hero
      hero.addEventListener('mouseleave', () => {
        images.forEach((img, index) => {
          img.classList.toggle('active', index === 0);
        });
        currentImageIndex = 0;
      });
    }
  });
</script>

<style>
  .hero-bg-image {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
    opacity: 0;
    transition: opacity 0.5s ease-in-out;
  }
  .hero-bg-image.active {
    opacity: 1;
  }
</style>

<style>
  .hero-background {
    background-color: rgba(255, 255, 255, 0.7);
    perspective: 1000px;
  }
  .hero-bg-image {
    transition: 
      opacity 0.5s ease, 
      transform 0.5s ease;
  }
  .hero-bg-image {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: opacity 0.5s ease-in-out;
  }
</style>

<style is:global>
  :root {
    --color-primary: #000000;
    --color-secondary: #ffffff;
    --color-text: #333333;
    --color-text-light: #666666;
    --container-width: 1440px;
    --spacing-sm: 1rem;
    --spacing-md: 2rem;
    --spacing-lg: 4rem;
    --spacing-xl: 8rem;
    --transition-slow: 0.6s;
    --transition-normal: 0.3s;
    --transition-fast: 0.15s;
    --ease-out-expo: cubic-bezier(0.19, 1, 0.22, 1);
    --ease-in-out: cubic-bezier(0.4, 0, 0.2, 1);
  }

  * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
  }

  html {
    font-family: 'Inter', sans-serif;
    background-color: var(--color-secondary);
    scroll-behavior: smooth;
  }

  body {
    overflow-x: hidden;
    color: var(--color-text);
    line-height: 1.6;
  }

  img {
    max-width: 100%;
    height: auto;
  }

  a {
    color: inherit;
    text-decoration: none;
    transition: all 0.3s ease;
  }

  .container {
    max-width: var(--container-width);
    margin: 0 auto;
    padding: 0 var(--spacing-sm);
  }

  h1, h2, h3, h4, h5, h6 {
    font-weight: 700;
    line-height: 1.2;
  }

  h1 {
    font-size: clamp(2.5rem, 5vw, 4rem);
  }

  h2 {
    font-size: clamp(2rem, 4vw, 3rem);
  }

  h3 {
    font-size: clamp(1.5rem, 3vw, 2rem);
  }

  .grid {
    display: grid;
    gap: var(--spacing-md);
  }

  .fade-in {
    opacity: 0;
    transform: translateY(20px);
    animation: fadeIn 0.8s var(--ease-out-expo) forwards;
  }

  .fade-in-delay-1 {
    animation-delay: 0.2s;
  }

  .fade-in-delay-2 {
    animation-delay: 0.4s;
  }

  .fade-in-delay-3 {
    animation-delay: 0.6s;
  }

  .slide-in-left {
    opacity: 0;
    transform: translateX(-50px);
    animation: slideInLeft 0.8s var(--ease-out-expo) forwards;
  }

  .slide-in-right {
    opacity: 0;
    transform: translateX(50px);
    animation: slideInRight 0.8s var(--ease-out-expo) forwards;
  }

  .scale-in {
    opacity: 0;
    transform: scale(0.9);
    animation: scaleIn 0.8s var(--ease-out-expo) forwards;
  }

  @keyframes fadeIn {
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes slideInLeft {
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }

  @keyframes slideInRight {
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }

  @keyframes scaleIn {
    to {
      opacity: 1;
      transform: scale(1);
    }
  }

  .hover-lift {
    transition: transform var(--transition-normal) var(--ease-out-expo);
  }

  .hover-lift:hover {
    transform: translateY(-8px);
  }

  .hover-scale {
    transition: transform var(--transition-normal) var(--ease-out-expo);
  }

  .hover-scale:hover {
    transform: scale(1.05);
  }

  .text-reveal {
    position: relative;
    overflow: hidden;
  }

  .text-reveal::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: var(--color-secondary);
    transform: scaleX(1);
    transform-origin: right;
    animation: revealText 1.2s var(--ease-out-expo) forwards;
  }

  @keyframes revealText {
    to {
      transform: scaleX(0);
    }
  }

  @media (hover: hover) {
    a:hover {
      opacity: 0.7;
    }
  }

  @media (max-width: 768px) {
    :root {
      --spacing-lg: 2rem;
      --spacing-xl: 4rem;
    }
  }
</style>
