---
interface Props {
  title: string;
}

const { title } = Astro.props;
---

<!DOCTYPE html>
<html lang="es">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Estudio creativo digital especializado en diseÃ±o web y branding">
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  </head>
  <body>
    <slot />
  </body>
</html>

<!-- CHATBOT  -->
<script>
window.addEventListener('mouseover', initLandbot, { once: true });
window.addEventListener('touchstart', initLandbot, { once: true });
var myLandbot;
function initLandbot() {
  if (!myLandbot) {
    var s = document.createElement('script');
    s.type = "module"
    s.async = true;
    s.addEventListener('load', function() {
      var myLandbot = new myLandbot.Livechat({
        configUrl: 'https://storage.googleapis.com/landbot.online/v3/H-2757457-M3YAP6MX84JDE7WS/index.json',
      });
    });
    s.src = 'https://cdn.landbot.io/landbot-3/landbot-3.0.0.mjs';
    var x = document.getElementsByTagName('script')[0];
    if (x !== null) {
      const parent = x.parentNode;
      if (parent !== null) {
        parent.insertBefore(s, x);
      } else {
        console.error('Parent element is null');
      }
    } else {
      console.error('Element x is null');
    }
  }
}
</script>

<!-- ESTILOS GLOBALES  -->
<style is:global>
  :root {
    --color-primary: #000000;
    --color-secondary: #ffffff;
    --color-text: #333333;
    --color-text-light: #666666;
    --container-width: 1440px;
    --spacing-sm: 1rem;
    --spacing-md: 2rem;
    --spacing-lg: 4rem;
    --spacing-xl: 8rem;
    --transition-slow: 0.6s;
    --transition-normal: 0.3s;
    --transition-fast: 0.15s;
    --ease-out-expo: cubic-bezier(0.19, 1, 0.22, 1);
    --ease-in-out: cubic-bezier(0.4, 0, 0.2, 1);
  }

  * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
  }

  html {
    font-family: 'Inter', sans-serif;
    background-color: var(--color-secondary);
    scroll-behavior: smooth;
  }

  body {
    overflow-x: hidden;
    color: var(--color-text);
    line-height: 1.6;
  }

  img {
    max-width: 100%;
    height: auto;
  }

  a {
    color: inherit;
    text-decoration: none;
    transition: all 0.3s ease;
  }

  .container {
    max-width: var(--container-width);
    margin: 0 auto;
    padding: 0 var(--spacing-sm);
  }

  h1, h2, h3, h4, h5, h6 {
    font-weight: 700;
    line-height: 1.2;
  }

  h1 {
    font-size: clamp(2.5rem, 5vw, 4rem);
  }

  h2 {
    font-size: clamp(2rem, 4vw, 3rem);
  }

  h3 {
    font-size: clamp(1.5rem, 3vw, 2rem);
  }

  .grid {
    display: grid;
    gap: var(--spacing-md);
  }

  .fade-in {
    opacity: 0;
    transform: translateY(20px);
    animation: fadeIn 0.8s var(--ease-out-expo) forwards;
  }

  .fade-in-delay-1 {
    animation-delay: 0.2s;
  }

  .fade-in-delay-2 {
    animation-delay: 0.4s;
  }

  .fade-in-delay-3 {
    animation-delay: 0.6s;
  }

  .slide-in-left {
    opacity: 0;
    transform: translateX(-50px);
    animation: slideInLeft 0.8s var(--ease-out-expo) forwards;
  }

  .slide-in-right {
    opacity: 0;
    transform: translateX(50px);
    animation: slideInRight 0.8s var(--ease-out-expo) forwards;
  }

  .scale-in {
    opacity: 0;
    transform: scale(0.9);
    animation: scaleIn 0.8s var(--ease-out-expo) forwards;
  }

  @keyframes fadeIn {
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes slideInLeft {
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }

  @keyframes slideInRight {
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }

  @keyframes scaleIn {
    to {
      opacity: 1;
      transform: scale(1);
    }
  }

  .hover-lift {
    transition: transform var(--transition-normal) var(--ease-out-expo);
  }

  .hover-lift:hover {
    transform: translateY(-8px);
  }

  .hover-scale {
    transition: transform var(--transition-normal) var(--ease-out-expo);
  }

  .hover-scale:hover {
    transform: scale(1.05);
  }

  .text-reveal {
    position: relative;
    overflow: hidden;
  }

  .text-reveal::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: var(--color-secondary);
    transform: scaleX(1);
    transform-origin: right;
    animation: revealText 1.2s var(--ease-out-expo) forwards;
  }

  @keyframes revealText {
    to {
      transform: scaleX(0);
    }
  }

  @media (hover: hover) {
    a:hover {
      opacity: 0.7;
    }
  }

  @media (max-width: 768px) {
    :root {
      --spacing-lg: 2rem;
      --spacing-xl: 4rem;
    }
  }
</style>
